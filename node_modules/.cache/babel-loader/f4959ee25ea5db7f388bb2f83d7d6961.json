{"remainingRequest":"/Users/nicolas/Workplace/nicolasmonnier/blog-nico/node_modules/babel-loader/lib/index.js!/Users/nicolas/Workplace/nicolasmonnier/blog-nico/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nicolas/Workplace/nicolasmonnier/blog-nico/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nicolas/Workplace/nicolasmonnier/blog-nico/src/components/BlogPosts.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nicolas/Workplace/nicolasmonnier/blog-nico/src/components/BlogPosts.vue","mtime":1604331827399},{"path":"/Users/nicolas/Workplace/nicolasmonnier/blog-nico/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nicolas/Workplace/nicolasmonnier/blog-nico/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/nicolas/Workplace/nicolasmonnier/blog-nico/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/nicolas/Workplace/nicolasmonnier/blog-nico/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'blog-posts',\n  data: function data() {\n    return {\n      posts: [],\n      dateOptions: {\n        year: 'numeric',\n        month: 'short',\n        day: '2-digit'\n      },\n      linkResolver: this.$prismic.linkResolver\n    };\n  },\n  methods: {\n    getPosts: function getPosts(tags) {\n      var _this = this;\n\n      if (tags == undefined) {\n        this.$prismic.client.query(this.$prismic.Predicates.at('document.type', \"post\"), {\n          orderings: '[my.post.date desc]'\n        }).then(function (response) {\n          _this.posts = response.results;\n        });\n      } else {\n        this.$prismic.client.query(this.$prismic.Predicates.at('document.tags', [tags]), {\n          orderings: '[my.post.date desc]'\n        }).then(function (response) {\n          _this.posts = response.results;\n        });\n      } //Query to get blog posts\n\n    },\n    //Function to get the first paragraph of text in a blog post and limit the displayed text at 300 characters\n    getFirstParagraph: function getFirstParagraph(post) {\n      var textLimit = 300;\n      var slices = post.data.body;\n      var firstParagraph = '';\n      var haveFirstParagraph = false;\n      slices.map(function (slice) {\n        if (!haveFirstParagraph) {\n          if (slice.slice_type == \"text\") {\n            slice.primary.text.forEach(function (block) {\n              if (block.type == \"paragraph\") {\n                if (!haveFirstParagraph) {\n                  firstParagraph += block.text;\n                  haveFirstParagraph = true;\n                }\n              }\n            });\n          }\n        }\n      });\n      var limitedText = firstParagraph.substr(0, textLimit);\n\n      if (firstParagraph.length > textLimit) {\n        return limitedText.substr(0, limitedText.lastIndexOf(' ')) + '...';\n      } else {\n        return firstParagraph;\n      }\n    }\n  },\n  created: function created() {\n    this.getPosts();\n  }\n};",{"version":3,"sources":["BlogPosts.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,eAAA;AACA,EAAA,IAAA,EAAA,YADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,KAAA,EAAA,EADA;AAEA,MAAA,WAAA,EAAA;AAAA,QAAA,IAAA,EAAA,SAAA;AAAA,QAAA,KAAA,EAAA,OAAA;AAAA,QAAA,GAAA,EAAA;AAAA,OAFA;AAGA,MAAA,YAAA,EAAA,KAAA,QAAA,CAAA;AAHA,KAAA;AAKA,GARA;AASA,EAAA,OAAA,EAAA;AACA,IAAA,QADA,oBACA,IADA,EACA;AAAA;;AACA,UAAA,IAAA,IAAA,SAAA,EAAA;AACA,aAAA,QAAA,CAAA,MAAA,CAAA,KAAA,CACA,KAAA,QAAA,CAAA,UAAA,CAAA,EAAA,CAAA,eAAA,EAAA,MAAA,CADA,EAEA;AAAA,UAAA,SAAA,EAAA;AAAA,SAFA,EAGA,IAHA,CAGA,UAAA,QAAA,EAAA;AACA,UAAA,KAAA,CAAA,KAAA,GAAA,QAAA,CAAA,OAAA;AACA,SALA;AAMA,OAPA,MAQA;AACA,aAAA,QAAA,CAAA,MAAA,CAAA,KAAA,CACA,KAAA,QAAA,CAAA,UAAA,CAAA,EAAA,CAAA,eAAA,EAAA,CAAA,IAAA,CAAA,CADA,EAEA;AAAA,UAAA,SAAA,EAAA;AAAA,SAFA,EAGA,IAHA,CAGA,UAAA,QAAA,EAAA;AACA,UAAA,KAAA,CAAA,KAAA,GAAA,QAAA,CAAA,OAAA;AACA,SALA;AAMA,OAhBA,CAiBA;;AAEA,KApBA;AAqBA;AACA,IAAA,iBAtBA,6BAsBA,IAtBA,EAsBA;AACA,UAAA,SAAA,GAAA,GAAA;AACA,UAAA,MAAA,GAAA,IAAA,CAAA,IAAA,CAAA,IAAA;AACA,UAAA,cAAA,GAAA,EAAA;AACA,UAAA,kBAAA,GAAA,KAAA;AAEA,MAAA,MAAA,CAAA,GAAA,CAAA,UAAA,KAAA,EAAA;AACA,YAAA,CAAA,kBAAA,EAAA;AACA,cAAA,KAAA,CAAA,UAAA,IAAA,MAAA,EAAA;AACA,YAAA,KAAA,CAAA,OAAA,CAAA,IAAA,CAAA,OAAA,CAAA,UAAA,KAAA,EAAA;AACA,kBAAA,KAAA,CAAA,IAAA,IAAA,WAAA,EAAA;AACA,oBAAA,CAAA,kBAAA,EAAA;AACA,kBAAA,cAAA,IAAA,KAAA,CAAA,IAAA;AACA,kBAAA,kBAAA,GAAA,IAAA;AACA;AACA;AACA,aAPA;AAQA;AACA;AACA,OAbA;AAeA,UAAA,WAAA,GAAA,cAAA,CAAA,MAAA,CAAA,CAAA,EAAA,SAAA,CAAA;;AAEA,UAAA,cAAA,CAAA,MAAA,GAAA,SAAA,EAAA;AACA,eAAA,WAAA,CAAA,MAAA,CAAA,CAAA,EAAA,WAAA,CAAA,WAAA,CAAA,GAAA,CAAA,IAAA,KAAA;AACA,OAFA,MAGA;AACA,eAAA,cAAA;AACA;AACA;AAnDA,GATA;AA8DA,EAAA,OA9DA,qBA8DA;AACA,SAAA,QAAA;AACA;AAhEA,CAAA","sourcesContent":["<template>\n  <!-- Check blog posts exist -->\n\n  <div v-if=\"posts.length !== 0\" class=\"blog-main\">\n    <div class=\"nav-links\">\n      <button v-on:click=\"getPosts()\">Tous</button>\n      <button v-on:click=\"getPosts('dev')\">Dev</button>\n      <button v-on:click=\"getPosts('politique')\">Politique</button>\n    </div>\n    <!-- Template for blog posts -->\n    <div v-for=\"post in posts\" :key=\"post.id\" v-bind:post=\"post\" class=\"blog-post\">\n      <router-link :to=\"linkResolver(post)\">\n        <h2>{{ $prismic.richTextAsPlain(post.data.title) }}</h2>\n        <p class=\"blog-post-meta\"><span class=\"created-at\">{{ Intl.DateTimeFormat('en-US', dateOptions).format(new Date(post.data.date)) }}</span></p>\n        <div>\n          <p>{{getFirstParagraph(post)}}</p>\n        </div>\n      </router-link>\n    </div>\n  </div>\n  <!-- If no blog posts return message -->\n  <div v-else class=\"blog-main\">\n    <button v-on:click=\"getPosts()\">Tous</button>\n    <button v-on:click=\"getPosts('dev')\">Dev</button>\n    <button v-on:click=\"getPosts('politique')\">Politique</button>\n    <p>No Posts published at this time.</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'blog-posts',\n  data () {\n    return {\n      posts: [],\n      dateOptions: { year: 'numeric', month: 'short', day: '2-digit' },\n      linkResolver: this.$prismic.linkResolver\n    }\n  },\n  methods: {\n    getPosts (tags) {\n      if (tags == undefined){\n        this.$prismic.client.query(\n          this.$prismic.Predicates.at('document.type', \"post\"),\n          { orderings : '[my.post.date desc]' }\n        ).then((response) => {\n          this.posts = response.results;\n        })\n      }\n      else {\n        this.$prismic.client.query(\n          this.$prismic.Predicates.at('document.tags', [tags]),\n          { orderings : '[my.post.date desc]'}\n        ).then((response) => {\n          this.posts = response.results;\n        })\n      }\n      //Query to get blog posts\n\n    },\n    //Function to get the first paragraph of text in a blog post and limit the displayed text at 300 characters\n    getFirstParagraph (post) {\n      const textLimit = 300;\n      const slices = post.data.body;\n      let firstParagraph = '';\n      let haveFirstParagraph = false;\n\n      slices.map(function(slice) {\n        if (!haveFirstParagraph) {\n          if (slice.slice_type == \"text\") {\n            slice.primary.text.forEach(function(block){\n              if (block.type == \"paragraph\") {\n                if (!haveFirstParagraph) {\n                  firstParagraph += block.text;\n                  haveFirstParagraph = true;\n                }\n              }\n            });\n          }\n        }\n      });\n\n      const limitedText = firstParagraph.substr(0, textLimit)\n\n      if (firstParagraph.length > textLimit) {\n        return limitedText.substr(0, limitedText.lastIndexOf(' ')) + '...';\n      }\n      else {\n        return firstParagraph;\n      }\n    },\n  },\n  created () {\n    this.getPosts()\n  }\n}\n</script>\n\n<style scoped>\n.nav-links {\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 30px;\n}\n.blog-main {\n  max-width: 700px;\n  margin: auto;\n}\n.blog-post {\n  margin-bottom: 3rem;\n}\n.blog-post h2 {\n  margin: 0;\n}\n\n.blog-post-meta {\n  color: #9A9A9A;\n  font-family: 'Lato', sans-serif;\n  margin-bottom: 8px;\n  font-size: 16px;\n}\n/* Media Queries */\n@media (max-width: 767px) {\n  .blog-main {\n    padding: 0 20px;\n    font-size: 18px;\n  }\n}\n</style>\n"],"sourceRoot":"src/components"}]}